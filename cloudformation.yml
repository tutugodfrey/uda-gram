Parameters:
  ProjectName:
    Description: Project template is been applied to.
    Type: String
    Default: Udagram
  EnvironmentName:
    Description: An environment name that will be prefixed to resources
    Type: String
    Default: Dev
  ImageId:
    Description: Image Id for EC2 instance
    Type: String
    Default: ami-047a51fa27710816e
  InstanceType:
    Description: Instance type defines the capabilities of EC2 instances
    Type: String
    Default: t2.micro
  KeyName:
    Description: SSH public key to login to instance
    Type: String
    Default: uda-keypair
  LaunchTemplateVersion:
    Description: Version of launch template in use
    Type: Number
    Default: 1

Resources:
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref Ec2IamRole

  Ec2IamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /

  S3Policy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: Udagrams3InstancePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Roles:
      - !Ref Ec2IamRole

  UdagramLBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh port 22 and http port 80
      VpcId:
        Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          CidrIp: 
            Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-VpcCIDR
      Tags:
        - Key: Name
          Value: UdagramSecgroup
  
  # Provision a Load Balancer in Public subnets
  UdagramLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-PUB-SN-A
      - Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-PUB-SN-B
      SecurityGroups:
      - Ref:  UdagramLBSG
  
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebappTargetGroup
      LoadBalancerArn:
         Ref: UdagramLoadBalancer
      Port: 80
      Protocol: HTTP
          
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebappTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref LBListener
      Priority: 1
  
  WebappTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId:
        Fn::ImportValue:
          Fn::Sub: ${ProjectName}-${EnvironmentName}-VPCID
      
  
  UdagramSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ssh port 22 and http port 80
      VpcId: 
        Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          CidrIp: 0.0.0.0/0
        - FromPort: 22
          ToPort: 22
          IpProtocol: TCP
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - FromPort: -1
          ToPort: -1
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: UdagramSecgroup
  
  # EC2 Instance template
  WebappInstanceTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${ProjectName}-${EnvironmentName}-WEB-APP-LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref ImageId
        KeyName: !Ref KeyName
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt
            - InstanceProfile
            - Arn
        SecurityGroupIds:
        - !Ref UdagramSG
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install unzip awscli -y
            yum install httpd -y
            systemctl start httpd.service
            cd /var/www/html
            aws s3 cp s3://udacity-demo-1/udacity.zip .
            unzip -o udacity.zip
        
  # EC2 Autoscaling group
  WebappAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-PUB-NETS
      LaunchTemplate:
        LaunchTemplateId: !Ref WebappInstanceTemplate
        Version: !Ref LaunchTemplateVersion
      MinSize: 1
      MaxSize: 5
      TargetGroupARNs:
      - !Ref WebappTargetGroup
      HealthCheckGracePeriod: 120
      HealthCheckType: ELB
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-Webapp
          PropagateAtLaunch: Yes

  # UdagramInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: !Ref InstanceType
  #     ImageId: !Ref ImageId
  #     KeyName: !Ref KeyName
  #     IamInstanceProfile: !Ref InstanceProfile
  #     SubnetId:
  #       Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-PUB-SN-A
  #     AvailabilityZone:
  #       Fn::ImportValue: !Sub ${ProjectName}-${EnvironmentName}-PUB-SN-AZ-A
  #     SecurityGroupIds:
  #     - Ref: UdagramSG
  #     Tags:
  #       - Key: Name
  #         Value: UdagramEc2Instance
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash
  #         yum update -y
  #         yum install unzip awscli -y
  #         yum install httpd -y
  #         systemctl start httpd.service
  #         cd /var/www/html
  #         aws s3 cp s3://udacity-demo-1/udacity.zip .
  #         unzip -o udacity.zip
        
Outputs:
  InstanceDNS:
    Description: DNS of the deployed instance
    Value: 
      !Join ['', [http://, Fn::GetAtt: [UdagramInstance, PublicDnsName]]]

  InstancePublicIp: 
    Description: Instance Public 
    Value: !GetAtt UdagramInstance.PublicIp
  
  LoadBalancerDNS:
    Description: Load Balancer DNS Name to access the website
    Value: 
      !Join ['', [http://, Fn::GetAtt: [ UdagramLoadBalancer, DNSName ]]]
  